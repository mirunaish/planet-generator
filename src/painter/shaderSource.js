// do not edit this file directly! edit fragmentShader.glsl and vertexShader.glsl
// then run scripts/convertShadersToJs.sh

fragmentSource = `
precision highp float;

const vec3 LightDirection = normalize(vec3(4, 3, 4));
const vec3 LightColor = vec3(1, 1, 0.9);

varying vec3 vWorldPosition;
varying vec3 vNormal;
// varying vec3 vColor;

vec3 lambert() {
    vec3 color = LightColor *
            max(vec3(0), dot(normalize(vNormal), LightDirection));
    return color;
}

void main() {
    vec3 color = 0.7 * vec3(1, 0.5, 0.5);
    gl_FragColor = vec4(color * lambert(), 1.0);
}
`;

vertexSource = `
uniform mat4 Model;
uniform mat4 ModelViewProjection;

attribute vec3 Position;
attribute vec3 Normal;
// attribute vec3 Color;

varying vec3 vWorldPosition;
varying vec3 vNormal;
// varying vec3 vColor;

void main() {
    gl_Position = ModelViewProjection * vec4(Position, 1);
    vWorldPosition = (Model * vec4(Position, 1)).xyz;
    vNormal = (Model * vec4(Normal, 1)).xyz;
    // vColor = Color;
}
`;
